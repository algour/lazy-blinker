
blink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000442  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000442  000004b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000618  00000000  00000000  000004b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b6f  00000000  00000000  00000ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000163f  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001650  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	0e c0       	rjmp	.+28     	; 0x20 <__bad_interrupt>
   4:	0d c0       	rjmp	.+26     	; 0x20 <__bad_interrupt>
   6:	0c c0       	rjmp	.+24     	; 0x20 <__bad_interrupt>
   8:	0b c0       	rjmp	.+22     	; 0x20 <__bad_interrupt>
   a:	0a c0       	rjmp	.+20     	; 0x20 <__bad_interrupt>
   c:	09 c0       	rjmp	.+18     	; 0x20 <__bad_interrupt>
   e:	08 c0       	rjmp	.+16     	; 0x20 <__bad_interrupt>
  10:	07 c0       	rjmp	.+14     	; 0x20 <__bad_interrupt>
  12:	06 c0       	rjmp	.+12     	; 0x20 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	02 d0       	rcall	.+4      	; 0x22 <main>
  1e:	0f c2       	rjmp	.+1054   	; 0x43e <_exit>

00000020 <__bad_interrupt>:
  20:	ef cf       	rjmp	.-34     	; 0x0 <__vectors>

00000022 <main>:
#include <util/delay.h>

#define LED_BIT _BV(PB4)

int main()
{
  22:	cf 93       	push	r28
  24:	df 93       	push	r29
  26:	cd b7       	in	r28, 0x3d	; 61
  28:	dd 27       	eor	r29, r29
  2a:	cc 51       	subi	r28, 0x1C	; 28
  2c:	cd bf       	out	0x3d, r28	; 61
        DDRB |= LED_BIT; // OUTPUT
  2e:	87 e3       	ldi	r24, 0x37	; 55
  30:	90 e0       	ldi	r25, 0x00	; 0
  32:	27 e3       	ldi	r18, 0x37	; 55
  34:	30 e0       	ldi	r19, 0x00	; 0
  36:	f9 01       	movw	r30, r18
  38:	20 81       	ld	r18, Z
  3a:	20 61       	ori	r18, 0x10	; 16
  3c:	fc 01       	movw	r30, r24
  3e:	20 83       	st	Z, r18

        while (1)
        {
                PORTB |= LED_BIT; // HIGH
  40:	88 e3       	ldi	r24, 0x38	; 56
  42:	90 e0       	ldi	r25, 0x00	; 0
  44:	28 e3       	ldi	r18, 0x38	; 56
  46:	30 e0       	ldi	r19, 0x00	; 0
  48:	f9 01       	movw	r30, r18
  4a:	20 81       	ld	r18, Z
  4c:	20 61       	ori	r18, 0x10	; 16
  4e:	fc 01       	movw	r30, r24
  50:	20 83       	st	Z, r18
  52:	80 e0       	ldi	r24, 0x00	; 0
  54:	90 e0       	ldi	r25, 0x00	; 0
  56:	aa e7       	ldi	r26, 0x7A	; 122
  58:	b4 e4       	ldi	r27, 0x44	; 68
  5a:	89 83       	std	Y+1, r24	; 0x01
  5c:	9a 83       	std	Y+2, r25	; 0x02
  5e:	ab 83       	std	Y+3, r26	; 0x03
  60:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  62:	20 e0       	ldi	r18, 0x00	; 0
  64:	30 e0       	ldi	r19, 0x00	; 0
  66:	46 e9       	ldi	r20, 0x96	; 150
  68:	53 e4       	ldi	r21, 0x43	; 67
  6a:	69 81       	ldd	r22, Y+1	; 0x01
  6c:	7a 81       	ldd	r23, Y+2	; 0x02
  6e:	8b 81       	ldd	r24, Y+3	; 0x03
  70:	9c 81       	ldd	r25, Y+4	; 0x04
  72:	52 d1       	rcall	.+676    	; 0x318 <__mulsf3>
  74:	dc 01       	movw	r26, r24
  76:	cb 01       	movw	r24, r22
  78:	8d 83       	std	Y+5, r24	; 0x05
  7a:	9e 83       	std	Y+6, r25	; 0x06
  7c:	af 83       	std	Y+7, r26	; 0x07
  7e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
  80:	20 e0       	ldi	r18, 0x00	; 0
  82:	30 e0       	ldi	r19, 0x00	; 0
  84:	40 e8       	ldi	r20, 0x80	; 128
  86:	5f e3       	ldi	r21, 0x3F	; 63
  88:	6d 81       	ldd	r22, Y+5	; 0x05
  8a:	7e 81       	ldd	r23, Y+6	; 0x06
  8c:	8f 81       	ldd	r24, Y+7	; 0x07
  8e:	98 85       	ldd	r25, Y+8	; 0x08
  90:	c2 d0       	rcall	.+388    	; 0x216 <__cmpsf2>
  92:	88 23       	and	r24, r24
  94:	2c f4       	brge	.+10     	; 0xa0 <__stack+0x1>
		__ticks = 1;
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	9a 87       	std	Y+10, r25	; 0x0a
  9c:	89 87       	std	Y+9, r24	; 0x09
  9e:	3b c0       	rjmp	.+118    	; 0x116 <__stack+0x77>
	else if (__tmp > 65535)
  a0:	20 e0       	ldi	r18, 0x00	; 0
  a2:	3f ef       	ldi	r19, 0xFF	; 255
  a4:	4f e7       	ldi	r20, 0x7F	; 127
  a6:	57 e4       	ldi	r21, 0x47	; 71
  a8:	6d 81       	ldd	r22, Y+5	; 0x05
  aa:	7e 81       	ldd	r23, Y+6	; 0x06
  ac:	8f 81       	ldd	r24, Y+7	; 0x07
  ae:	98 85       	ldd	r25, Y+8	; 0x08
  b0:	2f d1       	rcall	.+606    	; 0x310 <__gesf2>
  b2:	18 16       	cp	r1, r24
  b4:	3c f5       	brge	.+78     	; 0x104 <__stack+0x65>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
  b6:	20 e0       	ldi	r18, 0x00	; 0
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	40 e2       	ldi	r20, 0x20	; 32
  bc:	51 e4       	ldi	r21, 0x41	; 65
  be:	69 81       	ldd	r22, Y+1	; 0x01
  c0:	7a 81       	ldd	r23, Y+2	; 0x02
  c2:	8b 81       	ldd	r24, Y+3	; 0x03
  c4:	9c 81       	ldd	r25, Y+4	; 0x04
  c6:	28 d1       	rcall	.+592    	; 0x318 <__mulsf3>
  c8:	dc 01       	movw	r26, r24
  ca:	cb 01       	movw	r24, r22
  cc:	bc 01       	movw	r22, r24
  ce:	cd 01       	movw	r24, r26
  d0:	a6 d0       	rcall	.+332    	; 0x21e <__fixunssfsi>
  d2:	dc 01       	movw	r26, r24
  d4:	cb 01       	movw	r24, r22
  d6:	9a 87       	std	Y+10, r25	; 0x0a
  d8:	89 87       	std	Y+9, r24	; 0x09
  da:	0f c0       	rjmp	.+30     	; 0xfa <__stack+0x5b>
  dc:	8e e1       	ldi	r24, 0x1E	; 30
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	9c 87       	std	Y+12, r25	; 0x0c
  e2:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  e4:	8b 85       	ldd	r24, Y+11	; 0x0b
  e6:	9c 85       	ldd	r25, Y+12	; 0x0c
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <__stack+0x49>
  ec:	9c 87       	std	Y+12, r25	; 0x0c
  ee:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f0:	89 85       	ldd	r24, Y+9	; 0x09
  f2:	9a 85       	ldd	r25, Y+10	; 0x0a
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	9a 87       	std	Y+10, r25	; 0x0a
  f8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  fa:	89 85       	ldd	r24, Y+9	; 0x09
  fc:	9a 85       	ldd	r25, Y+10	; 0x0a
  fe:	89 2b       	or	r24, r25
 100:	69 f7       	brne	.-38     	; 0xdc <__stack+0x3d>
 102:	13 c0       	rjmp	.+38     	; 0x12a <__stack+0x8b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 104:	6d 81       	ldd	r22, Y+5	; 0x05
 106:	7e 81       	ldd	r23, Y+6	; 0x06
 108:	8f 81       	ldd	r24, Y+7	; 0x07
 10a:	98 85       	ldd	r25, Y+8	; 0x08
 10c:	88 d0       	rcall	.+272    	; 0x21e <__fixunssfsi>
 10e:	dc 01       	movw	r26, r24
 110:	cb 01       	movw	r24, r22
 112:	9a 87       	std	Y+10, r25	; 0x0a
 114:	89 87       	std	Y+9, r24	; 0x09
 116:	89 85       	ldd	r24, Y+9	; 0x09
 118:	9a 85       	ldd	r25, Y+10	; 0x0a
 11a:	9e 87       	std	Y+14, r25	; 0x0e
 11c:	8d 87       	std	Y+13, r24	; 0x0d
 11e:	8d 85       	ldd	r24, Y+13	; 0x0d
 120:	9e 85       	ldd	r25, Y+14	; 0x0e
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <__stack+0x83>
 126:	9e 87       	std	Y+14, r25	; 0x0e
 128:	8d 87       	std	Y+13, r24	; 0x0d
                _delay_ms(1000);
                PORTB &= ~LED_BIT; // LOW
 12a:	88 e3       	ldi	r24, 0x38	; 56
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	28 e3       	ldi	r18, 0x38	; 56
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	f9 01       	movw	r30, r18
 134:	20 81       	ld	r18, Z
 136:	2f 7e       	andi	r18, 0xEF	; 239
 138:	fc 01       	movw	r30, r24
 13a:	20 83       	st	Z, r18
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	aa e7       	ldi	r26, 0x7A	; 122
 142:	b4 e4       	ldi	r27, 0x44	; 68
 144:	8f 87       	std	Y+15, r24	; 0x0f
 146:	98 8b       	std	Y+16, r25	; 0x10
 148:	a9 8b       	std	Y+17, r26	; 0x11
 14a:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 14c:	20 e0       	ldi	r18, 0x00	; 0
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	46 e9       	ldi	r20, 0x96	; 150
 152:	53 e4       	ldi	r21, 0x43	; 67
 154:	6f 85       	ldd	r22, Y+15	; 0x0f
 156:	78 89       	ldd	r23, Y+16	; 0x10
 158:	89 89       	ldd	r24, Y+17	; 0x11
 15a:	9a 89       	ldd	r25, Y+18	; 0x12
 15c:	dd d0       	rcall	.+442    	; 0x318 <__mulsf3>
 15e:	dc 01       	movw	r26, r24
 160:	cb 01       	movw	r24, r22
 162:	8b 8b       	std	Y+19, r24	; 0x13
 164:	9c 8b       	std	Y+20, r25	; 0x14
 166:	ad 8b       	std	Y+21, r26	; 0x15
 168:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
 16a:	20 e0       	ldi	r18, 0x00	; 0
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	40 e8       	ldi	r20, 0x80	; 128
 170:	5f e3       	ldi	r21, 0x3F	; 63
 172:	6b 89       	ldd	r22, Y+19	; 0x13
 174:	7c 89       	ldd	r23, Y+20	; 0x14
 176:	8d 89       	ldd	r24, Y+21	; 0x15
 178:	9e 89       	ldd	r25, Y+22	; 0x16
 17a:	4d d0       	rcall	.+154    	; 0x216 <__cmpsf2>
 17c:	88 23       	and	r24, r24
 17e:	2c f4       	brge	.+10     	; 0x18a <__stack+0xeb>
		__ticks = 1;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	98 8f       	std	Y+24, r25	; 0x18
 186:	8f 8b       	std	Y+23, r24	; 0x17
 188:	3b c0       	rjmp	.+118    	; 0x200 <__stack+0x161>
	else if (__tmp > 65535)
 18a:	20 e0       	ldi	r18, 0x00	; 0
 18c:	3f ef       	ldi	r19, 0xFF	; 255
 18e:	4f e7       	ldi	r20, 0x7F	; 127
 190:	57 e4       	ldi	r21, 0x47	; 71
 192:	6b 89       	ldd	r22, Y+19	; 0x13
 194:	7c 89       	ldd	r23, Y+20	; 0x14
 196:	8d 89       	ldd	r24, Y+21	; 0x15
 198:	9e 89       	ldd	r25, Y+22	; 0x16
 19a:	ba d0       	rcall	.+372    	; 0x310 <__gesf2>
 19c:	18 16       	cp	r1, r24
 19e:	3c f5       	brge	.+78     	; 0x1ee <__stack+0x14f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1a0:	20 e0       	ldi	r18, 0x00	; 0
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	40 e2       	ldi	r20, 0x20	; 32
 1a6:	51 e4       	ldi	r21, 0x41	; 65
 1a8:	6f 85       	ldd	r22, Y+15	; 0x0f
 1aa:	78 89       	ldd	r23, Y+16	; 0x10
 1ac:	89 89       	ldd	r24, Y+17	; 0x11
 1ae:	9a 89       	ldd	r25, Y+18	; 0x12
 1b0:	b3 d0       	rcall	.+358    	; 0x318 <__mulsf3>
 1b2:	dc 01       	movw	r26, r24
 1b4:	cb 01       	movw	r24, r22
 1b6:	bc 01       	movw	r22, r24
 1b8:	cd 01       	movw	r24, r26
 1ba:	31 d0       	rcall	.+98     	; 0x21e <__fixunssfsi>
 1bc:	dc 01       	movw	r26, r24
 1be:	cb 01       	movw	r24, r22
 1c0:	98 8f       	std	Y+24, r25	; 0x18
 1c2:	8f 8b       	std	Y+23, r24	; 0x17
 1c4:	0f c0       	rjmp	.+30     	; 0x1e4 <__stack+0x145>
 1c6:	8e e1       	ldi	r24, 0x1E	; 30
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	9a 8f       	std	Y+26, r25	; 0x1a
 1cc:	89 8f       	std	Y+25, r24	; 0x19
 1ce:	89 8d       	ldd	r24, Y+25	; 0x19
 1d0:	9a 8d       	ldd	r25, Y+26	; 0x1a
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <__stack+0x133>
 1d6:	9a 8f       	std	Y+26, r25	; 0x1a
 1d8:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1da:	8f 89       	ldd	r24, Y+23	; 0x17
 1dc:	98 8d       	ldd	r25, Y+24	; 0x18
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	98 8f       	std	Y+24, r25	; 0x18
 1e2:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1e4:	8f 89       	ldd	r24, Y+23	; 0x17
 1e6:	98 8d       	ldd	r25, Y+24	; 0x18
 1e8:	89 2b       	or	r24, r25
 1ea:	69 f7       	brne	.-38     	; 0x1c6 <__stack+0x127>
 1ec:	13 c0       	rjmp	.+38     	; 0x214 <__stack+0x175>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1ee:	6b 89       	ldd	r22, Y+19	; 0x13
 1f0:	7c 89       	ldd	r23, Y+20	; 0x14
 1f2:	8d 89       	ldd	r24, Y+21	; 0x15
 1f4:	9e 89       	ldd	r25, Y+22	; 0x16
 1f6:	13 d0       	rcall	.+38     	; 0x21e <__fixunssfsi>
 1f8:	dc 01       	movw	r26, r24
 1fa:	cb 01       	movw	r24, r22
 1fc:	98 8f       	std	Y+24, r25	; 0x18
 1fe:	8f 8b       	std	Y+23, r24	; 0x17
 200:	8f 89       	ldd	r24, Y+23	; 0x17
 202:	98 8d       	ldd	r25, Y+24	; 0x18
 204:	9c 8f       	std	Y+28, r25	; 0x1c
 206:	8b 8f       	std	Y+27, r24	; 0x1b
 208:	8b 8d       	ldd	r24, Y+27	; 0x1b
 20a:	9c 8d       	ldd	r25, Y+28	; 0x1c
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <__stack+0x16d>
 210:	9c 8f       	std	Y+28, r25	; 0x1c
 212:	8b 8f       	std	Y+27, r24	; 0x1b
                _delay_ms(1000);
        }
 214:	15 cf       	rjmp	.-470    	; 0x40 <__SREG__+0x1>

00000216 <__cmpsf2>:
 216:	2f d0       	rcall	.+94     	; 0x276 <__fp_cmp>
 218:	08 f4       	brcc	.+2      	; 0x21c <__cmpsf2+0x6>
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	08 95       	ret

0000021e <__fixunssfsi>:
 21e:	57 d0       	rcall	.+174    	; 0x2ce <__fp_splitA>
 220:	88 f0       	brcs	.+34     	; 0x244 <__fixunssfsi+0x26>
 222:	9f 57       	subi	r25, 0x7F	; 127
 224:	90 f0       	brcs	.+36     	; 0x24a <__fixunssfsi+0x2c>
 226:	b9 2f       	mov	r27, r25
 228:	99 27       	eor	r25, r25
 22a:	b7 51       	subi	r27, 0x17	; 23
 22c:	a0 f0       	brcs	.+40     	; 0x256 <__fixunssfsi+0x38>
 22e:	d1 f0       	breq	.+52     	; 0x264 <__fixunssfsi+0x46>
 230:	66 0f       	add	r22, r22
 232:	77 1f       	adc	r23, r23
 234:	88 1f       	adc	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	1a f0       	brmi	.+6      	; 0x240 <__fixunssfsi+0x22>
 23a:	ba 95       	dec	r27
 23c:	c9 f7       	brne	.-14     	; 0x230 <__fixunssfsi+0x12>
 23e:	12 c0       	rjmp	.+36     	; 0x264 <__fixunssfsi+0x46>
 240:	b1 30       	cpi	r27, 0x01	; 1
 242:	81 f0       	breq	.+32     	; 0x264 <__fixunssfsi+0x46>
 244:	5e d0       	rcall	.+188    	; 0x302 <__fp_zero>
 246:	b1 e0       	ldi	r27, 0x01	; 1
 248:	08 95       	ret
 24a:	5b c0       	rjmp	.+182    	; 0x302 <__fp_zero>
 24c:	67 2f       	mov	r22, r23
 24e:	78 2f       	mov	r23, r24
 250:	88 27       	eor	r24, r24
 252:	b8 5f       	subi	r27, 0xF8	; 248
 254:	39 f0       	breq	.+14     	; 0x264 <__fixunssfsi+0x46>
 256:	b9 3f       	cpi	r27, 0xF9	; 249
 258:	cc f3       	brlt	.-14     	; 0x24c <__fixunssfsi+0x2e>
 25a:	86 95       	lsr	r24
 25c:	77 95       	ror	r23
 25e:	67 95       	ror	r22
 260:	b3 95       	inc	r27
 262:	d9 f7       	brne	.-10     	; 0x25a <__fixunssfsi+0x3c>
 264:	3e f4       	brtc	.+14     	; 0x274 <__fixunssfsi+0x56>
 266:	90 95       	com	r25
 268:	80 95       	com	r24
 26a:	70 95       	com	r23
 26c:	61 95       	neg	r22
 26e:	7f 4f       	sbci	r23, 0xFF	; 255
 270:	8f 4f       	sbci	r24, 0xFF	; 255
 272:	9f 4f       	sbci	r25, 0xFF	; 255
 274:	08 95       	ret

00000276 <__fp_cmp>:
 276:	99 0f       	add	r25, r25
 278:	00 08       	sbc	r0, r0
 27a:	55 0f       	add	r21, r21
 27c:	aa 0b       	sbc	r26, r26
 27e:	e0 e8       	ldi	r30, 0x80	; 128
 280:	fe ef       	ldi	r31, 0xFE	; 254
 282:	16 16       	cp	r1, r22
 284:	17 06       	cpc	r1, r23
 286:	e8 07       	cpc	r30, r24
 288:	f9 07       	cpc	r31, r25
 28a:	c0 f0       	brcs	.+48     	; 0x2bc <__fp_cmp+0x46>
 28c:	12 16       	cp	r1, r18
 28e:	13 06       	cpc	r1, r19
 290:	e4 07       	cpc	r30, r20
 292:	f5 07       	cpc	r31, r21
 294:	98 f0       	brcs	.+38     	; 0x2bc <__fp_cmp+0x46>
 296:	62 1b       	sub	r22, r18
 298:	73 0b       	sbc	r23, r19
 29a:	84 0b       	sbc	r24, r20
 29c:	95 0b       	sbc	r25, r21
 29e:	39 f4       	brne	.+14     	; 0x2ae <__fp_cmp+0x38>
 2a0:	0a 26       	eor	r0, r26
 2a2:	61 f0       	breq	.+24     	; 0x2bc <__fp_cmp+0x46>
 2a4:	23 2b       	or	r18, r19
 2a6:	24 2b       	or	r18, r20
 2a8:	25 2b       	or	r18, r21
 2aa:	21 f4       	brne	.+8      	; 0x2b4 <__fp_cmp+0x3e>
 2ac:	08 95       	ret
 2ae:	0a 26       	eor	r0, r26
 2b0:	09 f4       	brne	.+2      	; 0x2b4 <__fp_cmp+0x3e>
 2b2:	a1 40       	sbci	r26, 0x01	; 1
 2b4:	a6 95       	lsr	r26
 2b6:	8f ef       	ldi	r24, 0xFF	; 255
 2b8:	81 1d       	adc	r24, r1
 2ba:	81 1d       	adc	r24, r1
 2bc:	08 95       	ret

000002be <__fp_split3>:
 2be:	57 fd       	sbrc	r21, 7
 2c0:	90 58       	subi	r25, 0x80	; 128
 2c2:	44 0f       	add	r20, r20
 2c4:	55 1f       	adc	r21, r21
 2c6:	59 f0       	breq	.+22     	; 0x2de <__fp_splitA+0x10>
 2c8:	5f 3f       	cpi	r21, 0xFF	; 255
 2ca:	71 f0       	breq	.+28     	; 0x2e8 <__fp_splitA+0x1a>
 2cc:	47 95       	ror	r20

000002ce <__fp_splitA>:
 2ce:	88 0f       	add	r24, r24
 2d0:	97 fb       	bst	r25, 7
 2d2:	99 1f       	adc	r25, r25
 2d4:	61 f0       	breq	.+24     	; 0x2ee <__fp_splitA+0x20>
 2d6:	9f 3f       	cpi	r25, 0xFF	; 255
 2d8:	79 f0       	breq	.+30     	; 0x2f8 <__fp_splitA+0x2a>
 2da:	87 95       	ror	r24
 2dc:	08 95       	ret
 2de:	12 16       	cp	r1, r18
 2e0:	13 06       	cpc	r1, r19
 2e2:	14 06       	cpc	r1, r20
 2e4:	55 1f       	adc	r21, r21
 2e6:	f2 cf       	rjmp	.-28     	; 0x2cc <__fp_split3+0xe>
 2e8:	46 95       	lsr	r20
 2ea:	f1 df       	rcall	.-30     	; 0x2ce <__fp_splitA>
 2ec:	08 c0       	rjmp	.+16     	; 0x2fe <__fp_splitA+0x30>
 2ee:	16 16       	cp	r1, r22
 2f0:	17 06       	cpc	r1, r23
 2f2:	18 06       	cpc	r1, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	f1 cf       	rjmp	.-30     	; 0x2da <__fp_splitA+0xc>
 2f8:	86 95       	lsr	r24
 2fa:	71 05       	cpc	r23, r1
 2fc:	61 05       	cpc	r22, r1
 2fe:	08 94       	sec
 300:	08 95       	ret

00000302 <__fp_zero>:
 302:	e8 94       	clt

00000304 <__fp_szero>:
 304:	bb 27       	eor	r27, r27
 306:	66 27       	eor	r22, r22
 308:	77 27       	eor	r23, r23
 30a:	cb 01       	movw	r24, r22
 30c:	97 f9       	bld	r25, 7
 30e:	08 95       	ret

00000310 <__gesf2>:
 310:	b2 df       	rcall	.-156    	; 0x276 <__fp_cmp>
 312:	08 f4       	brcc	.+2      	; 0x316 <__gesf2+0x6>
 314:	8f ef       	ldi	r24, 0xFF	; 255
 316:	08 95       	ret

00000318 <__mulsf3>:
 318:	0a d0       	rcall	.+20     	; 0x32e <__mulsf3x>
 31a:	80 c0       	rjmp	.+256    	; 0x41c <__fp_round>
 31c:	71 d0       	rcall	.+226    	; 0x400 <__fp_pscA>
 31e:	28 f0       	brcs	.+10     	; 0x32a <__mulsf3+0x12>
 320:	76 d0       	rcall	.+236    	; 0x40e <__fp_pscB>
 322:	18 f0       	brcs	.+6      	; 0x32a <__mulsf3+0x12>
 324:	95 23       	and	r25, r21
 326:	09 f0       	breq	.+2      	; 0x32a <__mulsf3+0x12>
 328:	62 c0       	rjmp	.+196    	; 0x3ee <__fp_inf>
 32a:	67 c0       	rjmp	.+206    	; 0x3fa <__fp_nan>
 32c:	eb cf       	rjmp	.-42     	; 0x304 <__fp_szero>

0000032e <__mulsf3x>:
 32e:	c7 df       	rcall	.-114    	; 0x2be <__fp_split3>
 330:	a8 f3       	brcs	.-22     	; 0x31c <__mulsf3+0x4>

00000332 <__mulsf3_pse>:
 332:	99 23       	and	r25, r25
 334:	d9 f3       	breq	.-10     	; 0x32c <__mulsf3+0x14>
 336:	55 23       	and	r21, r21
 338:	c9 f3       	breq	.-14     	; 0x32c <__mulsf3+0x14>
 33a:	95 0f       	add	r25, r21
 33c:	50 e0       	ldi	r21, 0x00	; 0
 33e:	55 1f       	adc	r21, r21
 340:	aa 27       	eor	r26, r26
 342:	ee 27       	eor	r30, r30
 344:	ff 27       	eor	r31, r31
 346:	bb 27       	eor	r27, r27
 348:	00 24       	eor	r0, r0
 34a:	08 94       	sec
 34c:	67 95       	ror	r22
 34e:	20 f4       	brcc	.+8      	; 0x358 <__mulsf3_pse+0x26>
 350:	e2 0f       	add	r30, r18
 352:	f3 1f       	adc	r31, r19
 354:	b4 1f       	adc	r27, r20
 356:	0a 1e       	adc	r0, r26
 358:	22 0f       	add	r18, r18
 35a:	33 1f       	adc	r19, r19
 35c:	44 1f       	adc	r20, r20
 35e:	aa 1f       	adc	r26, r26
 360:	66 95       	lsr	r22
 362:	a9 f7       	brne	.-22     	; 0x34e <__mulsf3_pse+0x1c>
 364:	77 95       	ror	r23
 366:	30 f4       	brcc	.+12     	; 0x374 <__mulsf3_pse+0x42>
 368:	f3 0f       	add	r31, r19
 36a:	b4 1f       	adc	r27, r20
 36c:	0a 1e       	adc	r0, r26
 36e:	12 1e       	adc	r1, r18
 370:	08 f4       	brcc	.+2      	; 0x374 <__mulsf3_pse+0x42>
 372:	63 95       	inc	r22
 374:	33 0f       	add	r19, r19
 376:	44 1f       	adc	r20, r20
 378:	aa 1f       	adc	r26, r26
 37a:	22 1f       	adc	r18, r18
 37c:	76 95       	lsr	r23
 37e:	99 f7       	brne	.-26     	; 0x366 <__mulsf3_pse+0x34>
 380:	87 95       	ror	r24
 382:	20 f4       	brcc	.+8      	; 0x38c <__mulsf3_pse+0x5a>
 384:	b4 0f       	add	r27, r20
 386:	0a 1e       	adc	r0, r26
 388:	12 1e       	adc	r1, r18
 38a:	63 1f       	adc	r22, r19
 38c:	44 0f       	add	r20, r20
 38e:	aa 1f       	adc	r26, r26
 390:	22 1f       	adc	r18, r18
 392:	33 1f       	adc	r19, r19
 394:	86 95       	lsr	r24
 396:	a9 f7       	brne	.-22     	; 0x382 <__mulsf3_pse+0x50>
 398:	86 2f       	mov	r24, r22
 39a:	71 2d       	mov	r23, r1
 39c:	60 2d       	mov	r22, r0
 39e:	11 24       	eor	r1, r1
 3a0:	9f 57       	subi	r25, 0x7F	; 127
 3a2:	50 40       	sbci	r21, 0x00	; 0
 3a4:	8a f0       	brmi	.+34     	; 0x3c8 <__mulsf3_pse+0x96>
 3a6:	e1 f0       	breq	.+56     	; 0x3e0 <__mulsf3_pse+0xae>
 3a8:	88 23       	and	r24, r24
 3aa:	4a f0       	brmi	.+18     	; 0x3be <__mulsf3_pse+0x8c>
 3ac:	ee 0f       	add	r30, r30
 3ae:	ff 1f       	adc	r31, r31
 3b0:	bb 1f       	adc	r27, r27
 3b2:	66 1f       	adc	r22, r22
 3b4:	77 1f       	adc	r23, r23
 3b6:	88 1f       	adc	r24, r24
 3b8:	91 50       	subi	r25, 0x01	; 1
 3ba:	50 40       	sbci	r21, 0x00	; 0
 3bc:	a9 f7       	brne	.-22     	; 0x3a8 <__mulsf3_pse+0x76>
 3be:	9e 3f       	cpi	r25, 0xFE	; 254
 3c0:	51 05       	cpc	r21, r1
 3c2:	70 f0       	brcs	.+28     	; 0x3e0 <__mulsf3_pse+0xae>
 3c4:	14 c0       	rjmp	.+40     	; 0x3ee <__fp_inf>
 3c6:	9e cf       	rjmp	.-196    	; 0x304 <__fp_szero>
 3c8:	5f 3f       	cpi	r21, 0xFF	; 255
 3ca:	ec f3       	brlt	.-6      	; 0x3c6 <__mulsf3_pse+0x94>
 3cc:	98 3e       	cpi	r25, 0xE8	; 232
 3ce:	dc f3       	brlt	.-10     	; 0x3c6 <__mulsf3_pse+0x94>
 3d0:	86 95       	lsr	r24
 3d2:	77 95       	ror	r23
 3d4:	67 95       	ror	r22
 3d6:	b7 95       	ror	r27
 3d8:	f7 95       	ror	r31
 3da:	e7 95       	ror	r30
 3dc:	9f 5f       	subi	r25, 0xFF	; 255
 3de:	c1 f7       	brne	.-16     	; 0x3d0 <__mulsf3_pse+0x9e>
 3e0:	fe 2b       	or	r31, r30
 3e2:	88 0f       	add	r24, r24
 3e4:	91 1d       	adc	r25, r1
 3e6:	96 95       	lsr	r25
 3e8:	87 95       	ror	r24
 3ea:	97 f9       	bld	r25, 7
 3ec:	08 95       	ret

000003ee <__fp_inf>:
 3ee:	97 f9       	bld	r25, 7
 3f0:	9f 67       	ori	r25, 0x7F	; 127
 3f2:	80 e8       	ldi	r24, 0x80	; 128
 3f4:	70 e0       	ldi	r23, 0x00	; 0
 3f6:	60 e0       	ldi	r22, 0x00	; 0
 3f8:	08 95       	ret

000003fa <__fp_nan>:
 3fa:	9f ef       	ldi	r25, 0xFF	; 255
 3fc:	80 ec       	ldi	r24, 0xC0	; 192
 3fe:	08 95       	ret

00000400 <__fp_pscA>:
 400:	00 24       	eor	r0, r0
 402:	0a 94       	dec	r0
 404:	16 16       	cp	r1, r22
 406:	17 06       	cpc	r1, r23
 408:	18 06       	cpc	r1, r24
 40a:	09 06       	cpc	r0, r25
 40c:	08 95       	ret

0000040e <__fp_pscB>:
 40e:	00 24       	eor	r0, r0
 410:	0a 94       	dec	r0
 412:	12 16       	cp	r1, r18
 414:	13 06       	cpc	r1, r19
 416:	14 06       	cpc	r1, r20
 418:	05 06       	cpc	r0, r21
 41a:	08 95       	ret

0000041c <__fp_round>:
 41c:	09 2e       	mov	r0, r25
 41e:	03 94       	inc	r0
 420:	00 0c       	add	r0, r0
 422:	11 f4       	brne	.+4      	; 0x428 <__fp_round+0xc>
 424:	88 23       	and	r24, r24
 426:	52 f0       	brmi	.+20     	; 0x43c <__fp_round+0x20>
 428:	bb 0f       	add	r27, r27
 42a:	40 f4       	brcc	.+16     	; 0x43c <__fp_round+0x20>
 42c:	bf 2b       	or	r27, r31
 42e:	11 f4       	brne	.+4      	; 0x434 <__fp_round+0x18>
 430:	60 ff       	sbrs	r22, 0
 432:	04 c0       	rjmp	.+8      	; 0x43c <__fp_round+0x20>
 434:	6f 5f       	subi	r22, 0xFF	; 255
 436:	7f 4f       	sbci	r23, 0xFF	; 255
 438:	8f 4f       	sbci	r24, 0xFF	; 255
 43a:	9f 4f       	sbci	r25, 0xFF	; 255
 43c:	08 95       	ret

0000043e <_exit>:
 43e:	f8 94       	cli

00000440 <__stop_program>:
 440:	ff cf       	rjmp	.-2      	; 0x440 <__stop_program>
